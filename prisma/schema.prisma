// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  provider      Provider
  stream        Stream[]
  upvote        UpVote[]
  Space         Space?   @relation(fields: [spaceId], references: [id])
  spaceId       String?
  spaces        Space[]  @relation("UserSpaces")
  createdSpaces Space[]  @relation("CreatorSpaces")
}

model Stream {
  id              String         @id @default(uuid())
  type            StreamType
  url             String
  extractedId     String
  title           String
  smallImg        String
  bigImg          String
  played          Boolean        @default(false)
  playedTimeStamp DateTime?
  createdAt       DateTime       @default(now())
  active          Boolean        @default(true)
  upvotes         UpVote[]
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  currentStream   CurrentStream?
  spaceId         String?
  space           Space?         @relation(fields: [spaceId], references: [id])
}

model Space {
  id            String          @id @default(uuid())
  name          String
  creatorId     String
  streams       Stream[]
  users         User[]          @relation("UserSpaces")
  createdAt     DateTime        @default(now())
  User          User[]
  creator       User            @relation("CreatorSpaces", fields: [creatorId], references: [id])
  currentStream CurrentStream[]
}

model CurrentStream {
  userId   String  @id
  streamId String? @unique
  stream   Stream? @relation(fields: [streamId], references: [id])
  spaceId  String
  space    Space   @relation(fields: [spaceId], references: [id])
}

model UpVote {
  id       String @id @default(uuid())
  streamId String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@unique([streamId, userId])
}

enum Provider {
  Google
}

enum StreamType {
  Youtube
  Spotify
}
